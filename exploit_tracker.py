import requests
import json
import sys
from colorama import Fore, Back, Style
import os
from tqdm import tqdm
from dhooks import Webhook, Embed
import re
from datetime import datetime
import time
from collections import Counter
from art import *


def get_recent_100_cves(file):
        url = "https://poc-in-github.motikan2010.net/api/v1/?limit=100"
        try:
            res = requests.get(url)
            dict = json.loads(res.text)
            for i in range(100):
                file.write(dict['pocs'][i]['cve_id'])
                file.write('\n')
        except:
            print(Fore.RED + "[-] " + "Check your internet connections" + Style.RESET_ALL)
            print(Fore.RED + "[-] " + "Error on fetching exploits" + Style.RESET_ALL)

def create_db(file):
    data = open(file, "w")
    get_recent_100_cves(data)
    data.close()
    if os.path.getsize(file) == 0:
        print(Fore.CYAN + "[*] " + "Run script again" + Style.RESET_ALL)
        os.remove(file)
    else:
        print(Fore.GREEN + "[+] " + "File {} created successfully".format(file) + Style.RESET_ALL)
        
def update_db(database_update_name, database_name):
    os.remove(database_name)
    os.rename(database_update_name, database_name)

def find_and_compare_cves(db_name, dbn_name, new_cves):
    global new_cve
    new_cve = []

    cve_list = open(db_name, "r")
    file_1_text = set(cve_list.readlines())

    cve_list_new = open(dbn_name, "r")
    file_2_text = set(cve_list_new.readlines())

    if (file_1_text ^ file_2_text):
        for line in (file_1_text ^ file_2_text):
            line = line.replace("\n", "")
            new_cve.append(line)
   

    if len(new_cve) == 0:
        print(Fore.YELLOW + "[-] " + "No any exploits found, feel free and drink some coffee :)\n" + Style.RESET_ALL)
    else:
        show_result(new_cve)
        finding = open(new_cves, 'w')
        print(Fore.YELLOW + "[+] " + "Found {} exploits for CVEs".format(str(len(new_cve))) + Style.RESET_ALL)
        finding.write("[\n")

        url = 'https://poc-in-github.motikan2010.net/api/v1/?cve_id='
        
        description_progress_bar = Fore.LIGHTCYAN_EX + "[+] Fetching new exploits, please be patient " + Style.RESET_ALL  
        progress_bar = tqdm(total=len(new_cve), unit='B', unit_scale=True, bar_format="{desc}[ {n}/{total} ]", dynamic_ncols=True, desc=description_progress_bar)
        
        for i in new_cve:
            try:
                result = requests.get(url+str(i))
            except:
                print(Fore.RED + "[-] " + "Found some problems" + Style.RESET_ALL)
                print(Fore.CYAN + "[*] " + "Don't worry, Run script again for solving problems" + Style.RESET_ALL)
                sys.exit(-1)
            result2 = json.loads(result.content)
            finding.write("\t{")
            finding.write("\n")
            finding.write('\t\t"CVE": "{}",'.format(str(i)))
            finding.write("\n")
            count = len(result2['pocs'])
            vuln_description = re.sub(r'[^\x00-\x7F]', '', str(result2['pocs'][0]['vuln_description']).replace(".\n\n ", ".").replace("\n","").strip().replace("\\"," ").replace('"','\\"')).replace(", ", " ")
            a = vuln_description.encode('ascii',errors='ignore').decode()
            description = re.sub(r'[^\x00-\x7F]', '', str(result2['pocs'][0]['description']).replace("\n","").strip().replace('\\',' ').replace('"','\\"'))
            if str(result2['pocs'][0]['vuln_description']) == "None":
                finding.write('\t\t"Description": "{}",'.format(description))
            else:
                finding.write('\t\t"Description": "{}",'.format(description))
            finding.write("\n")
            finding.write('\t\t"exploits": [\n')
            for i in range(count):
                exploit = str(result2['pocs'][i]['html_url'])
                finding.write('\t\t\t"{}",'.format(exploit))
                finding.write("\n")
            finding.write('\t\t]\n')
            finding.write("\t},\n")
            progress_bar.update(1)
        progress_bar.close()
        if os.path.isfile(dbn_name):
            finding.write("]")
            finding.close()
            with open("exploits.json", 'r') as file:
                file_contents = file.read()
                modified_contents = file_contents.replace(",\n\t\t]\n\t}", "\n\t\t]\n\t}").replace("\t},\n]", "\t}\n]")
                modified_contents_dict = json.loads(modified_contents)
                with open(new_cves, 'w') as file:
                    file.write(json.dumps(modified_contents_dict))
            progress_bar.close()
            print("[+] " + "New exploits stored in " + Fore.YELLOW + "expliots.json " + Style.RESET_ALL + "file." )
        else:
            finding.close()

    update_db(dbn_name, db_name)          

def show_result(new_cve):
    sorted_cve_list = sorted(new_cve)

    cve_counts = Counter(sorted_cve_list)
    
    duplicates = {item: count for item, count in cve_counts.items() if count > 1}
    unique = {item: count for item, count in cve_counts.items() if count == 1}

    print(Fore.LIGHTBLUE_EX + "\n[*] " + "Report of new exploits\n" + Style.RESET_ALL)

    print(Fore.LIGHTYELLOW_EX + f"  {'CVE ID':<20}{'Count':<10}{'CVE ID':<20}{'Count':<10}{'CVE ID':<20}{'Count':<10}" + Style.RESET_ALL)
    print(Fore.LIGHTBLUE_EX + '  ' + '-' * 90 + Style.RESET_ALL)

    combined_list = list(duplicates.items()) + list(unique.items())

    for i in range(0, len(combined_list), 3):
        left_item = combined_list[i]
        middle_item = combined_list[i + 1] if i + 1 < len(combined_list) else ("", "")
        right_item = combined_list[i + 2] if i + 2 < len(combined_list) else ("", "")
        print(f"  {left_item[0]:<20}{left_item[1]:<10}{middle_item[0]:<20}{middle_item[1]:<10}{right_item[0]:<20}{right_item[1]:<10}")
    print()

def hook_exploits(file_name, discord_webhook_url):
    count = len(new_cve)
    if count != 0:
        hook = Webhook(discord_webhook_url)
        try:
            with open(file_name, 'r') as writeups:
                description_progress_bar = Fore.LIGHTCYAN_EX + "[+] Hooking new exploits to discord, please be patient " + Style.RESET_ALL  
                progress_bar = tqdm(total=count, unit='B', unit_scale=True, bar_format="{desc}[ {n}/{total} ]", dynamic_ncols=True, desc=description_progress_bar)
                entry = json.load(writeups)
                for item in entry:
                    cve = item["CVE"]
                    description = item["Description"]
                    expliots = item["exploits"]
                    embed = Embed()
                    embed.add_field(name='CVE', value=cve)
                    embed.add_field(name='Description', value=description)
                    a = ""
                    for i in expliots:
                        a = a + i + "\n"
                    embed.add_field(name='Exploits', value=a)

                    hook.send(embed=embed)

                    progress_bar.update(1)
            progress_bar.close()
        except:
            print(Fore.RED + "[-] " + "Found some problems in hooking exploits" + Style.RESET_ALL)
            print(Fore.CYAN + "[*] " + "Don't worry, Run script again for solving problems" + Style.RESET_ALL)
    else:
        print(Fore.YELLOW + "[-] " + "No any hooking to discord" + Style.RESET_ALL)

def hook_log(title, printable_content, hook_url):
    try:
        hook = Webhook(hook_url)
        now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        embed = Embed()
        embed.add_field(name=title, value="")
        embed.add_field(name=str(now), value="")
        hook.send(embed=embed)
        #print(Fore.WHITE + "[+] " + printable_content + Style.RESET_ALL)
    except:
        print(Fore.RED + "[-] " + "Found some problems in hooking log" + Style.RESET_ALL)
        print(Fore.CYAN + "[*] " + "Don't worry, Run script again for solving problems" + Style.RESET_ALL)
        sys.exit(-1)

def run(db_name, dbn_name, new_cves):
    print(Fore.CYAN + "\n[*] " + "Looking for database" + Style.RESET_ALL)
    time.sleep(1)
    if os.path.isfile(db_name):
        print(Fore.GREEN + "[*] " + "Database Exists" + Style.RESET_ALL)
        time.sleep(1)
        print(Fore.YELLOW + "[*] " + "Updating database" + Style.RESET_ALL)
        create_db(dbn_name)
        find_and_compare_cves(db_name, dbn_name, new_cves)
    else:
        print(Fore.RED + "[-] " + "Database not exists" + Style.RESET_ALL)
        print(Fore.CYAN + "[*] " + "Try to initialized database" + Style.RESET_ALL)
        create_db(db_name)
        time.sleep(1)
        print(Fore.GREEN + "[+] " + "Database Initialized successfully" + Style.RESET_ALL)
        
def main():
    try:
        print()
        print("[*] Script Mode")
        print("  [*] 1. Finding recent exploits")
        print("  [*] 2. Search for a certain cve's exploits")
        print()
        mode = input("[Number] >> ")
        
                
        if int(mode) == 2:     # search mode
            
            print(Fore.LIGHTBLACK_EX + "\n" + "-" * 35 + Style.RESET_ALL)
            print(Fore.YELLOW + "\n[*] Search mode\n" + Style.RESET_ALL)
            print("[*] CVE Number [CVE-****-*******]")
            cve = input("  >> ").strip()
            
            pattern = r'CVE-\d{4}-\d{4,7}'
            match = re.search(pattern, cve)

            if match:
                pass
            else:
                print(Fore.RED + "\n[-] Incorrect CVE format\n" + Style.RESET_ALL)
                sys.exit(-1)
            
            print("\n[*] Do you want to save output? [Yes/No]")
            save_q = input("  >> ")
                
            if save_q.lower() == "y" or save_q.lower() == "yes":
                output = open("output.txt", "w")
            
                url = 'https://poc-in-github.motikan2010.net/api/v1/?cve_id=' + cve
                result = requests.get(url)
                result2 = json.loads(result.content)
                
                try:
                    count = len(result2['pocs'])
                    print(Fore.CYAN + '\n[*] Description: ' + str(result2['pocs'][0]['description']) + Style.RESET_ALL)
                    output.write('\n[*] Description: ' + str(result2['pocs'][0]['description']))
                    for i in range(count):
                        print(Fore.LIGHTCYAN_EX + '    [+] ' + str(result2['pocs'][i]['html_url']) + Style.RESET_ALL)
                        output.write('\n    [+] ' + str(result2['pocs'][i]['html_url']))
                    print()
                    print("[+] The result saved into " + Fore.YELLOW + "output.txt " + Style.RESET_ALL + "file\n" )
                    output.close()
                except:
                    print(Fore.RED + "\n[-] No any exploit found\n" + Style.RESET_ALL)
                    os.remove("output.txt")
            
            else:
                url = 'https://poc-in-github.motikan2010.net/api/v1/?cve_id=' + cve
                result = requests.get(url)
                result2 = json.loads(result.content)
                try:
                    count = len(result2['pocs'])
                    print(Fore.CYAN + '\n[*] Description: ' + str(result2['pocs'][0]['description']) + Style.RESET_ALL)
                    for i in range(count):
                        print(Fore.LIGHTCYAN_EX + '    [+] ' + str(result2['pocs'][i]['html_url']) + Style.RESET_ALL)
                    print() 
                except:
                    print(Fore.RED + "\n[-] No any exploit found\n" + Style.RESET_ALL)

                
        else:
            print()
            print(Fore.LIGHTBLACK_EX  + "-" * 35 + Style.RESET_ALL)
            print(Fore.YELLOW + "\n[*] Crawling mode\n" + Style.RESET_ALL)
            print("[*] Crawaling Options")
            print("  [*] 1. Results saved into file [" + Fore.LIGHTMAGENTA_EX + "exploits.json" + Style.RESET_ALL + "] (" + Fore.LIGHTYELLOW_EX + "default" + Style.RESET_ALL +")")
            print("  [*] 2. Only hooking into discord [" + Fore.LIGHTMAGENTA_EX + "needs hook_url" + Style.RESET_ALL +"]")
            print("  [*] 3. Both, file and hook options [" + Fore.LIGHTMAGENTA_EX + "needs hook_url" + Style.RESET_ALL +"]")
            print()
            mode = input("[Number] >> ")
            
            if int(mode) == 3:      # both mode                
                print()
                print(Fore.LIGHTBLACK_EX  + "-" * 35 + Style.RESET_ALL)
                print(Fore.YELLOW + "\n[*] BOTH MODE (FILE & HOOK)\n" + Style.RESET_ALL)
                 
                hook_url, log_url, log_flag, repeat_interval = hook_and_interval()
                
                while True:
                    core(hook_url, log_url, log_flag)
                    if repeat_interval == "0":
                        break
                    else:
                        countdown_timer(int(repeat_interval))
                
            elif int(mode) == 2:      # hook mode
                print(Fore.LIGHTYELLOW_EX + "\n[+] " + "HOOK MODE\n" + Style.RESET_ALL)
                
                hook_url, log_url, log_flag, repeat_interval = hook_and_interval()
                
                while True:
                    core(hook_url, log_url, log_flag)
                    os.remove("exploits.json")
                    if repeat_interval == "0":
                        break
                    else:
                        countdown_timer(int(repeat_interval))
                        
            else:     # file mode
               print(Fore.LIGHTYELLOW_EX + "\n[+] " + "FILE MODE" + Style.RESET_ALL)
               run("db.txt", "new_db.txt", "exploits.json")
    except:
        pass

def countdown_timer(seconds):
    print()
    while seconds:
        hours, remainder = divmod(seconds, 3600)
        mins, secs = divmod(remainder, 60)
        timer = '{:02d}:{:02d}:{:02d}'.format(hours, mins, secs)
        desc = Fore.LIGHTBLACK_EX + "[*] " + "The next scan starts after [ " + timer + " ]" + Style.RESET_ALL
        print(desc, end="\r")
        time.sleep(1)
        seconds -= 1
    print()


def core(hook_url, log_url, log_flag):
    if log_flag:
        hook_log("Scan", "Scanning | Logged into discord", log_url)
    run("db.txt", "new_db.txt", "exploits.json")
    if log_flag:
        hook_log("Found {} exploits for CVEs".format(len(new_cve)), "Count | Logged into discord", log_url)
    hook_exploits("exploits.json", hook_url)
    if log_flag:
        hook_log("Finish", "[*] Finish | Logged into discord", log_url)

def hook_and_interval():
    
    print("[*] Options")
    print("  [*] Hook url [" + Fore.LIGHTGREEN_EX + "Exploits" + Style.RESET_ALL + "] (" + Fore.LIGHTYELLOW_EX + "Required" + Style.RESET_ALL +")")
    hook_url = input("  [URL] >> ")
    print()
    
    hook_flag = False
    if "https://discord.com/api/webhooks/" in hook_url:
        hook_flag = True
    else:
        print(Fore.RED + "\n[-] " + "Please enter valid hook url\n" + Style.RESET_ALL)
        sys.exit(-1)
    
    
    print("  [*] Hook url [" + Fore.LIGHTGREEN_EX + "Logs" + Style.RESET_ALL + "] (" + Fore.LIGHTYELLOW_EX + "default is no log" + Style.RESET_ALL +")")
    log_url = input("  [URL] >> ")
    
    print()
    log_flag = False
    if log_url != "":
        if "https://discord.com/api/webhooks/" in log_url:
            log_flag = True
        else:
            print(Fore.CYAN + "\n[-] " + "Please enter valid log url\n" + Style.RESET_ALL)
    else:
        print(Fore.YELLOW + "\n[*] " + "Run script without logging\n" + Style.RESET_ALL)   
        
    print("  [*] Repeat interval [" + Fore.LIGHTGREEN_EX + "0 means only one time" + Style.RESET_ALL + "] (" + Fore.LIGHTYELLOW_EX + "any, times in seconds)" + Style.RESET_ALL +")")
    repeat_interval = input("  [Number]  >> ")

    if repeat_interval == "0":
        print(Fore.LIGHTMAGENTA_EX + "\n[*] " + "Script run only one time\n".format(repeat_interval) + Style.RESET_ALL)
    else:
        print(Fore.LIGHTMAGENTA_EX + "\n[*] " + "Script run every {} seconds".format(repeat_interval) + Style.RESET_ALL)
    return hook_url,log_url,log_flag,repeat_interval
        
if __name__ == "__main__":
    text = "Exploit Tracker"
    fancy_text = text2art(text, font='tarty2')
    print(fancy_text)
    main()
